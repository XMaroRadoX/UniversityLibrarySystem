/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Librarian;

import Logic.Library;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 *
 * @author Marwan
 */
public class IssueBook extends javax.swing.JFrame {

    /**
     * Creates new form IssueBook
     */
    Library library;
    SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss a");

    public IssueBook() {
        initComponents();
    }

    public IssueBook(Library library) {
        this.library = library;
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        containerPanel = new javax.swing.JPanel();
        Header = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        issueBook = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        nameField = new javax.swing.JTextField();
        bookCallNoField = new javax.swing.JTextField();
        error = new javax.swing.JLabel();
        studentIDField = new javax.swing.JTextField();
        studentContactField = new javax.swing.JTextField();
        contactLabel = new javax.swing.JLabel();
        contactLabel1 = new javax.swing.JLabel();
        returnDateField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Librarian - Issue book");

        containerPanel.setBackground(new java.awt.Color(0, 0, 0));

        Header.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Header.setForeground(new java.awt.Color(153, 153, 153));
        Header.setText("Issue book");

        nameLabel.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(153, 153, 153));
        nameLabel.setText("Student Name:");

        passwordLabel.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        passwordLabel.setForeground(new java.awt.Color(153, 153, 153));
        passwordLabel.setText("Student ID:");

        emailLabel.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        emailLabel.setForeground(new java.awt.Color(153, 153, 153));
        emailLabel.setText("Book call #:");

        issueBook.setBackground(new java.awt.Color(0, 0, 0));
        issueBook.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        issueBook.setForeground(new java.awt.Color(255, 255, 255));
        issueBook.setText("Issue");
        issueBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issueBookActionPerformed(evt);
            }
        });

        backButton.setBackground(new java.awt.Color(0, 0, 0));
        backButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        nameField.setBackground(new java.awt.Color(51, 51, 51));
        nameField.setForeground(new java.awt.Color(255, 255, 255));
        nameField.setCaretColor(new java.awt.Color(255, 255, 255));
        nameField.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        nameField.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        bookCallNoField.setBackground(new java.awt.Color(51, 51, 51));
        bookCallNoField.setForeground(new java.awt.Color(255, 255, 255));
        bookCallNoField.setCaretColor(new java.awt.Color(255, 255, 255));
        bookCallNoField.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        bookCallNoField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookCallNoFieldActionPerformed(evt);
            }
        });

        error.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        error.setForeground(new java.awt.Color(255, 51, 51));

        studentIDField.setBackground(new java.awt.Color(51, 51, 51));
        studentIDField.setForeground(new java.awt.Color(255, 255, 255));
        studentIDField.setCaretColor(new java.awt.Color(255, 255, 255));
        studentIDField.setDisabledTextColor(new java.awt.Color(255, 255, 255));

        studentContactField.setBackground(new java.awt.Color(51, 51, 51));
        studentContactField.setForeground(new java.awt.Color(255, 255, 255));
        studentContactField.setCaretColor(new java.awt.Color(255, 255, 255));
        studentContactField.setDisabledTextColor(new java.awt.Color(255, 255, 255));

        contactLabel.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        contactLabel.setForeground(new java.awt.Color(153, 153, 153));
        contactLabel.setText("Student contact:");

        contactLabel1.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        contactLabel1.setForeground(new java.awt.Color(153, 153, 153));
        contactLabel1.setText("Return date:");

        returnDateField.setBackground(new java.awt.Color(51, 51, 51));
        returnDateField.setForeground(new java.awt.Color(255, 255, 255));
        returnDateField.setCaretColor(new java.awt.Color(255, 255, 255));
        returnDateField.setDisabledTextColor(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout containerPanelLayout = new javax.swing.GroupLayout(containerPanel);
        containerPanel.setLayout(containerPanelLayout);
        containerPanelLayout.setHorizontalGroup(
            containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelLayout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(error, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, containerPanelLayout.createSequentialGroup()
                        .addComponent(contactLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(returnDateField))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, containerPanelLayout.createSequentialGroup()
                        .addComponent(issueBook, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Header, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, containerPanelLayout.createSequentialGroup()
                        .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(contactLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(passwordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(emailLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(studentContactField, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                            .addComponent(studentIDField)
                            .addComponent(nameField)
                            .addComponent(bookCallNoField))))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        containerPanelLayout.setVerticalGroup(
            containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelLayout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addComponent(Header, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookCallNoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contactLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentContactField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contactLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(returnDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(issueBook)
                    .addComponent(backButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(error, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bookCallNoFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookCallNoFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookCallNoFieldActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        LibrarianSection librarianMenu = new LibrarianSection(library);
        dispose();
        librarianMenu.setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed
    public void saveInFile(String s) {
        BufferedWriter bw = null;
        int i = 0;
        try {
            File file = new File(s);

            if (!file.exists()) {
                file.createNewFile();
            }

            FileWriter fw = new FileWriter(file);
            bw = new BufferedWriter(fw);
            for (i = 0; i < library.getAdminsCount(); i++) {
                String data = "a," + library.getAdmins()[i].getName() + "," + library.getAdmins()[i].getPassword() + "\n";
                bw.write(data);
            }

            for (i = 0; i < library.getLibraiansCount(); i++) {
                String data = "l," + library.getLibraians()[i].getName() + "," + library.getLibraians()[i].getPassword() + "," + library.getLibraians()[i].getEmail() + "," + library.getLibraians()[i].getCity() + "," + library.getLibraians()[i].getAddress() + "," + library.getLibraians()[i].getContactNo() + "\n";
                bw.write(data);
            }

            for (i = 0; i < library.getBooksCount(); i++) {
                String data = "b," + library.getBooks()[i].getCallNo() + "," + library.getBooks()[i].getBookName() + "," + library.getBooks()[i].getAuthorName() + "," + library.getBooks()[i].getPublisherName() + "," + library.getBooks()[i].getQuantity() + "," + library.getBooks()[i].getIssued() + "," + formatter.format(library.getBooks()[i].getAddDate()) + "\n";
                bw.write(data);
            }
            for (i = 0; i < library.getStudentsCount(); i++) {
                int k;
                String data = "s," + library.getStudents()[i].getName() + "," + library.getStudents()[i].getPassword() + "," + library.getStudents()[i].getEmail() + "," + library.getStudents()[i].getCity() + "," + Integer.toString(library.getStudents()[i].getId()) + "," + library.getStudents()[i].getAddress() + "," + library.getStudents()[i].getContactNo() + "," + Integer.toString(library.getStudents()[i].getIssued()) + "," + Double.toString(library.getStudents()[i].getPenalty());
                if (library.getStudents()[i].getIssued() > 0) {
                    k = 0;
                    while (true) {
                        if (k == library.getStudents()[i].getIssued()) {
                            break;
                        }
                        data = data + "," + library.getStudents()[i].getIssuedBooks()[k] + "," + formatter.format(library.getStudents()[i].getIssueDates()[k]) + "," + formatter.format(library.getStudents()[i].getReturnDates()[k]);

                        k++;
                    }
                    data = data + ",null" + "\n";
                } else {
                    data = data + "\n";
                }
                bw.write(data);
            }

        } catch (IOException ioe) {
        } finally {
            try {
                if (bw != null) {
                    bw.close();
                }
            } catch (IOException ex) {
            }
        }
    }

    public boolean stringContainsNumber(String s) {
        return Pattern.compile("[0-9]").matcher(s).find();
    }

    private void issueBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_issueBookActionPerformed
        boolean errors = false;
        error.setText(null);

        if (nameField.getText().equals("") && studentIDField.getText().equals("") && bookCallNoField.getText().equals("") && returnDateField.getText().equals("") && studentContactField.getText().equals("")) {
            error.setText("No data entered");
            return;
        }
        String name = nameField.getText();
        String id = studentIDField.getText();
        String contactNo = studentContactField.getText();
        String callNo = bookCallNoField.getText();
        String returnDate = returnDateField.getText();

        if (name.equals("")) {
            error.setText("No data entered");
            errors = true;
        }
        if (stringContainsNumber(name)) {
            error.setText("Name contains invalid characters");
            errors = true;
        }
        try {
            Integer.parseInt(id);
        } catch (NumberFormatException e) {
            error.setText("Enter valid ID");
            errors = true;
        }
        try {
            formatter.parse(returnDate);
        } catch (ParseException ex) {
            error.setText("Date must follow dd-MM-yyyy HH:mm:ss a");
            errors = true;
        }

        if (!errors) {
            for (int i = 0; i < library.getBooksCount(); i++) {
                if (library.getBooks()[i].getCallNo().equals(callNo)) {
                    for (int j = 0; j < library.getStudentsCount(); j++) {
                        if (library.getStudents()[j].getName().equals(name) && id.equals(Integer.toString(library.getStudents()[j].getId())) && library.getStudents()[j].getContactNo().equals(contactNo)) {
                            if (library.getBooks()[i].getQuantity() > 0) {
                                if (library.getStudents()[j].getIssued() < 3) {
                                    for (int k = 0; k < library.getStudents()[j].getIssued(); k++) {
                                        if (library.getStudents()[j].getIssuedBooks()[k].equals(callNo)) {
                                            error.setText("Student already issued this book");
                                            return;
                                        }
                                    }
                                    library.getBooks()[i].setQuantity(library.getBooks()[i].getQuantity() - 1);
                                    library.getBooks()[i].setIssued(library.getBooks()[i].getIssued() + 1);
                                    library.getStudents()[j].setIssuedCalls(callNo, "null", returnDate);
                                    library.getStudents()[j].updateIssued(library.getStudents()[j].getIssued() + 1);
                                    saveInFile(library.getPath());
                                    JOptionPane.showMessageDialog(null, "Book issued successfully");
                                    LibrarianSection librarianMenu = new LibrarianSection(library);
                                    dispose();
                                    librarianMenu.setVisible(true);
                                } else {
                                    error.setText("Student reached the limit for issued books");
                                    return;
                                }
                            } else {
                                error.setText("Book is out of stock");
                                return;
                            }
                        }

                    }
                    error.setText("Student not found");
                    return;

                }
            }
            error.setText("Book not found");
        }
    }//GEN-LAST:event_issueBookActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IssueBook().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Header;
    private javax.swing.JButton backButton;
    private javax.swing.JTextField bookCallNoField;
    private javax.swing.JLabel contactLabel;
    private javax.swing.JLabel contactLabel1;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel error;
    private javax.swing.JButton issueBook;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField returnDateField;
    private javax.swing.JTextField studentContactField;
    private javax.swing.JTextField studentIDField;
    // End of variables declaration//GEN-END:variables
}
